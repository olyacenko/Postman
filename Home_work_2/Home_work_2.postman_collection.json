{
	"info": {
		"_postman_id": "dfdf1617-8536-4318-a27d-324cae26ab4a",
		"name": "Home_work_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21754851",
		"_collection_link": "https://www.postman.com/restless-star-665929/workspace/my-workspace/collection/21754851-dfdf1617-8536-4318-a27d-324cae26ab4a?action=share&creator=21754851&source=collection_link"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Проверить, что в body приходит правильный string.",
							"",
							"pm.test(\"Check body to have right string\", function () {",
							"pm.response.to.have.body(\"This is the first responce from server!\");});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				},
				"description": "[http://162.55.220.72:5006/first](http://162.55.220.72:5005/first)\n\n1\\. Отправить запрос.\n\n2\\. Статус код 200\n\n3\\. Проверить, что в body приходит правильный string."
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.",
							"var respJsonData = pm.response.json();",
							"",
							"//4. Проверить, что name в ответе равно name's request (name вбить руками.)",
							"var resp_name = respJsonData.name;",
							"",
							"pm.test(\"Check respose_name = request_name manual \", function () {",
							"    pm.expect(resp_name).to.eql('Olya');});",
							"",
							"//5. Проверить, что age в ответе равно age's request (age вбить руками.)",
							"var resp_age = +respJsonData.age;",
							"",
							"pm.test(\"Check respose_age = request_age manual \", function () {",
							"    pm.expect(resp_age).to.eql(29);});",
							"// 6. Проверить, что salary в ответе равно salary's request (salary вбить руками.)",
							"var resp_salary = respJsonData.salary;",
							"",
							"pm.test(\"Check respose_salary = request_salary manual \", function () {",
							"    pm.expect(resp_salary).to.eql(500);});",
							"",
							"// 7. Спарсить request.",
							"var request = request.data;",
							"",
							"// 8. Проверить, что name в ответе равно name's request (name забрать из request.)",
							"var req_name = request.name;",
							"",
							"pm.test(\"Check respose_name = request_name by variable \", function () {",
							"    pm.expect(resp_name).to.eql(req_name);});",
							"",
							"// 9. Проверить, что age в ответе равно age's request (age забрать из request.)",
							"var req_age = +request.age;",
							"",
							"pm.test(\"Check respose_age = request_age by variable \", function () {",
							"    pm.expect(resp_age).to.eql(req_age);});",
							"",
							"// 10. Проверить, что salary в ответе равно salary's request (salary забрать из request.)",
							"var req_salary = +request.salary;",
							"",
							"pm.test(\"Check respose_salary = request_salary by variable \", function () {",
							"    pm.expect(resp_salary).to.eql(req_salary);});",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							"var resp_family = respJsonData.family;",
							"console.log(resp_family);",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"var resp_u_salary_1_5_year = resp_family.u_salary_1_5_year;",
							"",
							"pm.test(\"Check respose_u_salary_1_5_year = request_salary*4\", function () {",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(req_salary*4);});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				},
				"description": "[http://162.55.220.72:5006/user_info_3](http://162.55.220.72:5005/user_info_3)\n\n1\\. Отправить запрос.\n\n2\\. Статус код 200\n\n3\\. Спарсить response body в json.\n\n4\\. Проверить, что name в ответе равно name s request (name вбить руками.)\n\n5\\. Проверить, что age в ответе равно age s request (age вбить руками.)\n\n6\\. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\n\n7\\. Спарсить request.\n\n8\\. Проверить, что name в ответе равно name s request (name забрать из request.)\n\n9\\. Проверить, что age в ответе равно age s request (age забрать из request.)\n\n10\\. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\n\n11\\. Вывести в консоль параметр family из response.\n\n12\\. Проверить что u_salary_1_5_year в ответе равно salary\\*4 (salary забрать из request)"
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. Спарсить response body в json.",
							"var respJsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"var request = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name's request (name забрать из request.)",
							"var resp_name = respJsonData.name;",
							"var req_name = request.name;",
							"",
							"pm.test(\"Check response_name = request_name by variable\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);});",
							"",
							"// 6. Проверить, что age в ответе равно age's request (age забрать из request.)",
							"var resp_age = respJsonData.age;",
							"var req_age = request.age;",
							"",
							"pm.test(\"Check response_age = request_age by variable\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);});",
							"",
							"// 7. Проверить, что salary в ответе равно salary's request (salary забрать из request.)",
							"var resp_salary = respJsonData.salary;",
							"var req_salary = +request.salary;",
							"",
							"pm.test(\"Check response_salary = request_salary by variable\", function () {",
							"    pm.expect(resp_salary).to.eql(req_salary);});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"var resp_family = respJsonData.family;",
							"console.log(resp_family);",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"var resp_dog = resp_family.pets.dog;",
							"",
							"pm.test(\"Check param 'dog' has param 'name'\", function () {",
							"    pm.expect(resp_dog).to.have.property('name');});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Check param 'dog' has param 'age'\", function () {",
							"    pm.expect(resp_dog).to.have.property('age');});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"var resp_dog_name = resp_dog.name;",
							"",
							"pm.test(\"Check param 'name' has value 'Luky'\", function () {",
							"    pm.expect(resp_dog_name).to.eql('Luky');});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"var resp_dog_age = resp_dog.age;",
							"",
							"pm.test(\"Check param 'age' has value '4'\", function () {",
							"    pm.expect(resp_dog_age).to.eql(4);});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Olya&age=29&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olya"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				},
				"description": "[http://162.55.220.72:5006/object_info_3](http://162.55.220.72:5005/object_info_3)\n\n1\\. Отправить запрос.\n\n2\\. Статус код 200\n\n3\\. Спарсить response body в json.\n\n4\\. Спарсить request.\n\n5\\. Проверить, что name в ответе равно name s request (name забрать из request.)\n\n6\\. Проверить, что age в ответе равно age s request (age забрать из request.)\n\n7\\. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\n\n8\\. Вывести в консоль параметр family из response.\n\n9\\. Проверить, что у параметра dog есть параметры name.\n\n10\\. Проверить, что у параметра dog есть параметры age.\n\n11\\. Проверить, что параметр name имеет значение Luky.\n\n12\\. Проверить, что параметр age имеет значение 4."
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.",
							"var respJsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"var request = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name's request (name забрать из request.)",
							"var resp_name = respJsonData.name;",
							"var req_name = request.name;",
							"",
							"pm.test(\"Check response_name = request_name by variable\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"var resp_age = respJsonData.age;",
							"var req_age = +request.age;",
							"",
							"pm.test(\"Check response_age = request_age by variable\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"var req_salary = +request.salary;",
							"console.log('Request salary = ',req_salary);",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"var resp_salary = respJsonData.salary;",
							"console.log('Response salary = ',resp_salary);",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log('Response salary № 0 = ',resp_salary[0]);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log('Response salary № 1 = ',resp_salary[1]);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log('Response salary № 2 = ',resp_salary[2]);",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check response_salary_0 = request_salary by variable\", function () {",
							"    pm.expect(resp_salary[0]).to.eql(req_salary);});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check response_salary_1 = request_salary by variable\", function () {",
							"    pm.expect(+resp_salary[1]).to.eql(req_salary*2);});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Check response_salary_2 = request_salary by variable\", function () {",
							"    pm.expect(+resp_salary[2]).to.eql(req_salary*3);});",
							"",
							"// 15. Создать в окружении переменную name",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", req_name);",
							"",
							"// 16. Создать в окружении переменную age",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", req_age);",
							"",
							"// 17. Создать в окружении переменную salary",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", req_salary);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"console.log('Salary list:');",
							"",
							"for (var salary_list of resp_salary){",
							"    console.log(salary_list);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Olya&age=29&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olya"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				},
				"description": "[http://162.55.220.72:5006/object_info_4](http://162.55.220.72:5005/object_info_4)\n\n1\\. Отправить запрос.\n\n2\\. Статус код 200\n\n3\\. Спарсить response body в json.\n\n4\\. Спарсить request.\n\n5\\. Проверить, что name в ответе равно name s request (name забрать из request.)\n\n6\\. Проверить, что age в ответе равно age из request (age забрать из request.)\n\n7\\. Вывести в консоль параметр salary из request.\n\n8\\. Вывести в консоль параметр salary из response.\n\n9\\. Вывести в консоль 0-й элемент параметра salary из response.\n\n10\\. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\n\n11\\. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\n\n12\\. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\n\n13\\. Проверить, что 1-й элемент параметра salary равен salary\\*2 из request (salary забрать из request.)\n\n14\\. Проверить, что 2-й элемент параметра salary равен salary\\*3 из request (salary забрать из request.)\n\n15\\. Создать в окружении переменную name\n\n16\\. Создать в окружении переменную age\n\n17\\. Создать в окружении переменную salary\n\n18\\. Передать в окружение переменную name\n\n19\\. Передать в окружение переменную age\n\n20\\. Передать в окружение переменную salary\n\n21\\. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary."
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6. Спарсить response body в json.",
							"var respJsonData = pm.response.json();",
							"",
							"// 7. Спарсить request.",
							"var request = request.data;",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Check response to have param 'start_qa_salary'\", function () {",
							"    pm.expect(respJsonData).to.have.property('start_qa_salary');",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Check response to have param 'qa_salary_after_6_months'\", function () {",
							"    pm.expect(respJsonData).to.have.property('qa_salary_after_6_months');",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Check response to have param 'qa_salary_after_12_months'\", function () {",
							"    pm.expect(respJsonData).to.have.property('qa_salary_after_12_months');",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Check response to have param 'qa_salary_after_1.5_year'\", function () {",
							"    pm.expect(respJsonData).to.have.property('qa_salary_after_1.5_year');",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Check response to have param 'qa_salary_after_3.5_years'\", function () {",
							"    pm.expect(respJsonData).to.have.property('qa_salary_after_3.5_years');",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"Check response to have param 'person'\", function () {",
							"    pm.expect(respJsonData).to.have.property('person');",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"var start_qa_salary = respJsonData.start_qa_salary;",
							"var req_salary = +request.salary;",
							"",
							"pm.test(\"Check start_qa_salary = request_salary by variable\", function () {",
							"    pm.expect(start_qa_salary).to.eql(req_salary);",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"var qa_salary_after_6_months = respJsonData.qa_salary_after_6_months;",
							"",
							"pm.test(\"Check qa_salary_after_6_months = request_salary*2 by variable\", function () {",
							"    pm.expect(qa_salary_after_6_months).to.eql(req_salary*2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"var qa_salary_after_12_months = respJsonData.qa_salary_after_12_months;",
							"",
							"pm.test(\"Check qa_salary_after_12_months = request_salary*2.7 by variable\", function () {",
							"    pm.expect(qa_salary_after_12_months).to.eql(req_salary*2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"var qa_salary_after_1_5_year = respJsonData['qa_salary_after_1.5_year'];",
							"",
							"pm.test(\"Check qa_salary_after_1.5_year = request_salary*3.3 by variable\", function () {",
							"    pm.expect(qa_salary_after_1_5_year).to.eql(req_salary*3.3);",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"var qa_salary_after_3_5_years = respJsonData['qa_salary_after_3.5_years'];",
							"",
							"pm.test(\"Check qa_salary_after_3.5_years = request_salary*3.8 by variable\", function () {",
							"    pm.expect(qa_salary_after_3_5_years).to.eql(req_salary*3.8);",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"var u_name = respJsonData.person.u_name;",
							"",
							"pm.test(\"Check first element of u_name = request_salary by variable\", function () {",
							"    pm.expect(u_name[1]).to.eql(req_salary);",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"var u_age = respJsonData.person.u_age;",
							"",
							"pm.test(\"Check u_age = request_age by variable\", function () {",
							"    pm.expect(u_age).to.eql(+request.age);",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"var u_salary_5_years = respJsonData.person.u_salary_5_years;",
							"",
							"pm.test(\"Check u_salary_5_years = request_salary*4.2 by variable\", function () {",
							"    pm.expect(u_salary_5_years).to.eql(req_salary*4.2);",
							"});",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"console.log('Person list:');",
							"var person = respJsonData.person;",
							"for(var person_list in person){",
							"    console.log(person_list + \":\" + person[person_list])",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				},
				"description": "[http://162.55.220.72:5006/user_info_2](http://162.55.220.72:5005/user_info_2)\n\n1\\. Вставить параметр salary из окружения в request\n\n2\\. Вставить параметр age из окружения в age\n\n3\\. Вставить параметр name из окружения в name\n\n4\\. Отправить запрос.\n\n5\\. Статус код 200\n\n6\\. Спарсить response body в json.\n\n7\\. Спарсить request.\n\n8\\. Проверить, что json response имеет параметр start_qa_salary\n\n9\\. Проверить, что json response имеет параметр qa_salary_after_6_months\n\n10\\. Проверить, что json response имеет параметр qa_salary_after_12_months\n\n11\\. Проверить, что json response имеет параметр qa_salary_after_1.5_year\n\n12\\. Проверить, что json response имеет параметр qa_salary_after_3.5_years\n\n13\\. Проверить, что json response имеет параметр person\n\n14\\. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\n\n15\\. Проверить, что параметр qa_salary_after_6_months равен salary\\*2 из request (salary забрать из request.)\n\n16\\. Проверить, что параметр qa_salary_after_12_months равен salary\\*2.7 из request (salary забрать из request.)\n\n17\\. Проверить, что параметр qa_salary_after_1.5_year равен salary\\*3.3 из request (salary забрать из request.)\n\n18\\. Проверить, что параметр qa_salary_after_3.5_years равен salary\\*3.8 из request (salary забрать из request.)\n\n19\\. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\n\n20\\. Проверить, что что параметр u_age равен age из request (age забрать из request.)\n\n21\\. Проверить, что параметр u_salary_5_years равен salary\\*4.2 из request (salary забрать из request.)\n\n22\\. \\*_\\\\_Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}